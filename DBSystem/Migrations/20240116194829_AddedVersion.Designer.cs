// <auto-generated />
using System;
using DBSystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBSystem.Migrations
{
    [DbContext(typeof(TuraContext))]
    [Migration("20240116194829_AddedVersion")]
    partial class AddedVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBEntities.Entities.Drivers.Drivers", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DriverID"));

                    b.Property<string>("DriverCompanyID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("DriverFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DriverLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OIB")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("DriverID", "DriverCompanyID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DBEntities.Entities.Planner.Planner", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Domaci")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LCityTown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LPostNumber")
                        .HasColumnType("integer");

                    b.Property<int>("LPostalNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TransportPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("UCityTown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UPostalNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UvozIzvoz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleID")
                        .HasColumnType("integer");

                    b.HasKey("UID");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleID");

                    b.ToTable("Planner");
                });

            modelBuilder.Entity("DBEntities.Entities.Tours.Tours", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DebtAmount")
                        .HasColumnType("double precision");

                    b.Property<int>("EmployeeIPRId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IPR")
                        .HasColumnType("boolean");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("InvoniceIssued")
                        .HasColumnType("boolean");

                    b.Property<string>("LCityTown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LPostalNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("MonthlyPayer")
                        .HasColumnType("boolean");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<bool>("Received")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<bool>("Return")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("TourDate")
                        .HasColumnType("date");

                    b.Property<string>("TourMark")
                        .HasColumnType("text");

                    b.Property<int>("TourNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UCityTown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UPostalNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Vechicle1IDVehicleID")
                        .HasColumnType("integer");

                    b.Property<int>("Vechicle2IDVehicleID")
                        .HasColumnType("integer");

                    b.HasKey("UID");

                    b.HasIndex("EmployeeIPRId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Vechicle1IDVehicleID");

                    b.HasIndex("Vechicle2IDVehicleID");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("DBEntities.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DBEntities.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer");

                    b.HasKey("VehicleID");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DBEntities.Entities.Vehicles.VehiclesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehiclesType");
                });

            modelBuilder.Entity("DBEntities.Entities.Planner.Planner", b =>
                {
                    b.HasOne("DBEntities.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBEntities.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DBEntities.Entities.Tours.Tours", b =>
                {
                    b.HasOne("DBEntities.Entities.Users.User", "EmployeeIPR")
                        .WithMany()
                        .HasForeignKey("EmployeeIPRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBEntities.Entities.Users.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBEntities.Entities.Vehicles.Vehicle", "Vechicle1ID")
                        .WithMany()
                        .HasForeignKey("Vechicle1IDVehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBEntities.Entities.Vehicles.Vehicle", "Vechicle2ID")
                        .WithMany()
                        .HasForeignKey("Vechicle2IDVehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeIPR");

                    b.Navigation("Vechicle1ID");

                    b.Navigation("Vechicle2ID");
                });

            modelBuilder.Entity("DBEntities.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("DBEntities.Entities.Vehicles.VehiclesType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });
#pragma warning restore 612, 618
        }
    }
}
